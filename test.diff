diff --git a/src/s3.c b/src/s3.c
index d1c0d03..267a046 100644
--- a/src/s3.c
+++ b/src/s3.c
@@ -3044,12 +3044,14 @@ static void head_object(int argc, char **argv, int optindex)
     while (*slash && (*slash != '/')) {
         slash++;
     }
-    if (!*slash || !*(slash + 1)) {
-        fprintf(stderr, "\nERROR: Invalid bucket/key name: %s\n",
-                argv[optindex]);
-        usageExit(stderr);
+    //if (!*slash || !*(slash + 1)) {
+    //    fprintf(stderr, "\nERROR: Invalid bucket/key name: %s\n",
+    //            argv[optindex]);
+    //    usageExit(stderr);
+    //}
+    if (*slash) {
+        *slash++ = 0;
     }
-    *slash++ = 0;
 
     const char *bucketName = argv[optindex++];
     const char *key = slash;
@@ -3795,7 +3797,8 @@ void set_logging(int argc, char **argv, int optindex)
 
     const char *bucketName = argv[optindex++];
 
-    const char *targetBucket = 0, *targetPrefix = 0, *filename = 0;
+    //const char *targetBucket = 0, *targetPrefix = 0, *filename = 0;
+    const char *targetBucket = 0, *targetPrefix = 0;
 
     while (optindex < argc) {
         char *param = argv[optindex++];
@@ -3806,49 +3809,49 @@ void set_logging(int argc, char **argv, int optindex)
                           TARGET_PREFIX_PREFIX_LEN)) {
             targetPrefix = &(param[TARGET_PREFIX_PREFIX_LEN]);
         }
-        else if (!strncmp(param, FILENAME_PREFIX, FILENAME_PREFIX_LEN)) {
-            filename = &(param[FILENAME_PREFIX_LEN]);
-        }
+        //else if (!strncmp(param, FILENAME_PREFIX, FILENAME_PREFIX_LEN)) {
+        //    filename = &(param[FILENAME_PREFIX_LEN]);
+        //}
         else {
             fprintf(stderr, "\nERROR: Unknown param: %s\n", param);
             usageExit(stderr);
         }
     }
 
-    int aclGrantCount = 0;
-    S3AclGrant aclGrants[S3_MAX_ACL_GRANT_COUNT];
+    //int aclGrantCount = 0;
+    //S3AclGrant aclGrants[S3_MAX_ACL_GRANT_COUNT];
 
-    if (targetBucket) {
-        FILE *infile;
+    //if (targetBucket) {
+    //    FILE *infile;
 
-        if (filename) {
-            if (!(infile = fopen(filename, "r" FOPEN_EXTRA_FLAGS))) {
-                fprintf(stderr, "\nERROR: Failed to open input file %s: ",
-                        filename);
-                perror(0);
-                exit(-1);
-            }
-        }
-        else {
-            infile = stdin;
-        }
+    //    if (filename) {
+    //        if (!(infile = fopen(filename, "r" FOPEN_EXTRA_FLAGS))) {
+    //            fprintf(stderr, "\nERROR: Failed to open input file %s: ",
+    //                    filename);
+    //            perror(0);
+    //            exit(-1);
+    //        }
+    //    }
+    //    else {
+    //        infile = stdin;
+    //    }
 
-        // Read in the complete ACL
-        char aclBuf[65536];
-        aclBuf[fread(aclBuf, 1, sizeof(aclBuf), infile)] = 0;
-        char ownerId[S3_MAX_GRANTEE_USER_ID_SIZE];
-        char ownerDisplayName[S3_MAX_GRANTEE_DISPLAY_NAME_SIZE];
+    //    // Read in the complete ACL
+    //    char aclBuf[65536];
+    //    aclBuf[fread(aclBuf, 1, sizeof(aclBuf), infile)] = 0;
+    //    char ownerId[S3_MAX_GRANTEE_USER_ID_SIZE];
+    //    char ownerDisplayName[S3_MAX_GRANTEE_DISPLAY_NAME_SIZE];
 
-        // Parse it
-        if (!convert_simple_acl(aclBuf, ownerId, ownerDisplayName,
-                                &aclGrantCount, aclGrants)) {
-            fprintf(stderr, "\nERROR: Failed to parse ACLs\n");
-            fclose(infile);
-            exit(-1);
-        }
+    //    // Parse it
+    //    if (!convert_simple_acl(aclBuf, ownerId, ownerDisplayName,
+    //                            &aclGrantCount, aclGrants)) {
+    //        fprintf(stderr, "\nERROR: Failed to parse ACLs\n");
+    //        fclose(infile);
+    //        exit(-1);
+    //    }
 
-        fclose(infile);
-    }
+    //    fclose(infile);
+    //}
 
     S3_init();
 
@@ -3872,7 +3875,7 @@ void set_logging(int argc, char **argv, int optindex)
 
     do {
         S3_set_server_access_logging(&bucketContext, targetBucket,
-                                     targetPrefix, aclGrantCount, aclGrants,
+                                     targetPrefix, 0, 0,
                                      0,
                                      timeoutMsG, &responseHandler, 0);
     } while (S3_status_is_retryable(statusG) && should_retry());
diff --git a/test/test.sh b/test/test.sh
index 413554b..ec29cd8 100755
--- a/test/test.sh
+++ b/test/test.sh
@@ -25,7 +25,7 @@ if [ -z "$TEST_BUCKET_PREFIX" ]; then
 fi
 
 if [ -z "$S3_COMMAND" ]; then
-    S3_COMMAND=s3
+    S3_COMMAND="s3 -u"
 fi
 
 failures=0
@@ -68,6 +68,14 @@ diff seqdata testkey
 failures=$(($failures + (($? == 0) ? 0 : 1)))
 rm -f seqdata testkey
 
+# Head bucket and object
+echo "$S3_COMMAND head $TEST_BUCKET"
+$S3_COMMAND head $TEST_BUCKET
+failures=$(($failures + (($? == 0) ? 0 : 1)))
+echo "$S3_COMMAND head $TEST_BUCKET/testkey"
+$S3_COMMAND head $TEST_BUCKET/testkey
+failures=$(($failures + (($? == 0) ? 0 : 1)))
+
 # Delete the file
 echo "$S3_COMMAND delete $TEST_BUCKET/testkey"
 $S3_COMMAND delete $TEST_BUCKET/testkey
@@ -78,11 +86,13 @@ echo "$S3_COMMAND delete $TEST_BUCKET"
 $S3_COMMAND delete $TEST_BUCKET
 failures=$(($failures + (($? == 0) ? 0 : 1)))
 
-# Make sure it's not there
+echo failures:$failures
+# Make sure it's not there, the failures will be added when it's normal
 echo "$S3_COMMAND list | grep $TEST_BUCKET"
 $S3_COMMAND list | grep $TEST_BUCKET
 failures=$(($failures + (($? == 1) ? 0 : 1)))
 
+echo failures:$failures
 # Now create it again
 echo "$S3_COMMAND create $TEST_BUCKET"
 $S3_COMMAND create $TEST_BUCKET
@@ -129,6 +139,7 @@ diff key_5 copykey
 failures=$(($failures + (($? == 0) ? 0 : 1)))
 rm -f key_5 copykey
 
+echo failures:$failures
 # Delete the files
 for i in `seq 0 9`; do
     echo "$S3_COMMAND delete $TEST_BUCKET/key_$i"
@@ -149,6 +160,7 @@ echo "$S3_COMMAND put $TEST_BUCKET/aclkey < /dev/null"
 $S3_COMMAND put $TEST_BUCKET/aclkey < /dev/null
 failures=$(($failures + (($? == 0) ? 0 : 1)))
 
+echo failures:$failures
 # Get the bucket acl
 rm -f acl
 echo "$S3_COMMAND getacl $TEST_BUCKET filename=acl"
@@ -166,7 +178,7 @@ echo "$S3_COMMAND setacl $TEST_BUCKET filename=acl"
 $S3_COMMAND setacl $TEST_BUCKET filename=acl
 failures=$(($failures + (($? == 0) ? 0 : 1)))
 
-# Test to make sure that it worked
+# Test to make sure that it worked, the failures will be added when using ceph s3
 rm -f acl_new
 echo "$S3_COMMAND getacl $TEST_BUCKET filename=acl_new"
 $S3_COMMAND getacl $TEST_BUCKET filename=acl_new
@@ -192,7 +204,7 @@ echo "$S3_COMMAND setacl $TEST_BUCKET/aclkey filename=acl"
 $S3_COMMAND setacl $TEST_BUCKET/aclkey filename=acl
 failures=$(($failures + (($? == 0) ? 0 : 1)))
 
-# Test to make sure that it worked
+# Test to make sure that it worked, the failures will be added when using ceph s3
 rm -f acl_new
 echo "$S3_COMMAND getacl $TEST_BUCKET/aclkey filename=acl_new"
 $S3_COMMAND getacl $TEST_BUCKET/aclkey filename=acl_new
@@ -213,6 +225,38 @@ diff mpfile mpfile.get
 failures=$(($failures + (($? == 0) ? 0 : 1)))
 rm -f mpfile mpfile.get
 
+rm -f lifecycleconf lifecycleconf_new
+echo -n '<?xml version="1.0" encoding="UTF-8"?><LifecycleConfiguration xmlns="http://s3.amazonaws.com/doc/2006-03-01/"><Rule><ID>Rule1</ID><Filter><Prefix>logs/</Prefix></Filter><Status>Enabled</Status><Expiration><Days>3</Days></Expiration></Rule></LifecycleConfiguration>' > lifecycleconf
+echo "$S3_COMMAND setlifecycle $TEST_BUCKET filename=lifecycleconf"
+$S3_COMMAND setlifecycle $TEST_BUCKET filename=lifecycleconf
+failures=$(($failures + (($? == 0) ? 0 : 1)))
+echo "$S3_COMMAND getlifecycle $TEST_BUCKET filename=lifecycleconf_new"
+$S3_COMMAND getlifecycle $TEST_BUCKET filename=lifecycleconf_new
+failures=$(($failures + (($? == 0) ? 0 : 1)))
+diff lifecycleconf lifecycleconf_new
+failures=$(($failures + (($? == 0) ? 0 : 1)))
+
+
+rm -f acl
+echo "$S3_COMMAND getacl $TEST_BUCKET filename=acl"
+$S3_COMMAND getacl $TEST_BUCKET filename=acl
+cat <<EOF >> acl
+Group   Authenticated AWS Users                                                                   READ
+Group   All Users                                                                                 READ_ACP
+UserID  LogDeliver (LogDeliver)                                                                   WRITE
+UserID  LogDeliver (LogDeliver)                                                                   READ_ACP
+EOF
+$S3_COMMAND create $TEST_BUCKET-log
+failures=$(($failures + (($? == 0) ? 0 : 1)))
+echo "$S3_COMMAND setacl $TEST_BUCKET-log filename=acl"
+$S3_COMMAND setacl $TEST_BUCKET-log filename=acl
+echo "$S3_COMMAND setlogging $TEST_BUCKET targetBucket=$TEST_BUCKET-log"
+$S3_COMMAND setlogging $TEST_BUCKET targetBucket=$TEST_BUCKET-log
+failures=$(($failures + (($? == 0) ? 0 : 1)))
+echo "$S3_COMMAND getlogging $TEST_BUCKET"
+$S3_COMMAND getlogging $TEST_BUCKET
+failures=$(($failures + (($? == 0) ? 0 : 1)))
+
 # Remove the test files
 echo "$S3_COMMAND delete $TEST_BUCKET/mpfile"
 $S3_COMMAND delete $TEST_BUCKET/mpfile
